Object file format for cosmos-binutils
--------------------------------------

These object files will be generated by the assembler. Basically, the assembler
takes a file written in assembly, and translates the instructions into machine
code the dcpu-16 can understand. But preprocessor directives, label
definitions and instructions refering to symbols (such as a label or a define
), are left to the linker to resolve. For example, you do a  'JSR abs' in main.s, 
but 'abs' is a label. The assembler translates JSR, but leaves the next word for 
the linker to resolve. (note the assembler takes 1 assembly file, and outputs 
1 object file, and the linker takes multiple object files, and outputs 1 binary 
file) The linker then searches in main.o for the label 'abs''s definition, if 
it is there, it writes in the next word of the JSR instruction, the position 
of 'abs''s definition, if not, it keeps doing the same thing for every file. 
If the definition is not found, an error is reported.

The format is the following (note that the object file format is in text
mode, and not binary mode like every other object file format; this
could lead to some problems if this format is ever stored in a dcpu, as
the size of the file is highly increased if text mode is used, although
using packed strings (that is, 2 characters per address, and not 1,
which is the format of the lem1802 (the other space is used for color)),
would half the size, but printing would be slower, as we have to dissect
the word in 2):

<symbol>,<offset from bin section>
bin:
<word>,<word>,<word>:<undefined symbol>,<word>,<word,<word>,<word>,<word>,<word>;<symbol declaration>,<word>,<word>,<word>.

Explanation:

The first section of the file, is a reference table for the undefined
symbols, and their offset from the bin section (starts at 0).

The second section (bin:) is a line of words separated by commas. If a
colon is found, that means the following element is an undefined symbol.
If a semicolon is found, that means the following element is a symbol
definition.
